Terminals unused in grammar

    NEW
    RETURN
    VOID
    IF
    ELSE
    WHILE
    DO
    FOR
    SWITCH
    CASE
    DEFAULT
    BREAK
    TRUE
    FALSE
    INT
    CHAR
    BOOL
    STRING
    DOUBLE


Grammar

    0 $accept: program $end

    1 program: ε
    2        | program class

    3 class: PUBLIC CLASS CLASS_NAME LPAR variable_declaration RPAR

    4 variable_declaration: ε
    5                     | variable_declaration DATATYPE IDENT
    6                     | variable_declaration PRIVATE DATATYPE IDENT
    7                     | variable_declaration PUBLIC DATATYPE IDENT


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    DATATYPE (258) 5 6 7
    NEW (259)
    RETURN (260)
    VOID (261)
    IF (262)
    ELSE (263)
    WHILE (264)
    DO (265)
    FOR (266)
    SWITCH (267)
    CASE (268)
    DEFAULT (269)
    BREAK (270)
    TRUE (271)
    FALSE (272)
    INT (273)
    CHAR (274)
    BOOL (275)
    STRING (276)
    DOUBLE (277)
    PRIVATE (278) 6
    PUBLIC (279) 3 7
    IDENT (280) 5 6 7
    LPAR (281) 3
    RPAR (282) 3
    CLASS (283) 3
    CLASS_NAME (284) 3


Nonterminals, with rules where they appear

    $accept (30)
        on left: 0
    program (31)
        on left: 1 2
        on right: 0 2
    class (32)
        on left: 3
        on right: 2
    variable_declaration (33)
        on left: 4 5 6 7
        on right: 3 5 6 7


State 0

    0 $accept: • program $end

    $default  reduce using rule 1 (program)

    program  go to state 1


State 1

    0 $accept: program • $end
    2 program: program • class

    $end    shift, and go to state 2
    PUBLIC  shift, and go to state 3

    class  go to state 4


State 2

    0 $accept: program $end •

    $default  accept


State 3

    3 class: PUBLIC • CLASS CLASS_NAME LPAR variable_declaration RPAR

    CLASS  shift, and go to state 5


State 4

    2 program: program class •

    $default  reduce using rule 2 (program)


State 5

    3 class: PUBLIC CLASS • CLASS_NAME LPAR variable_declaration RPAR

    CLASS_NAME  shift, and go to state 6


State 6

    3 class: PUBLIC CLASS CLASS_NAME • LPAR variable_declaration RPAR

    LPAR  shift, and go to state 7


State 7

    3 class: PUBLIC CLASS CLASS_NAME LPAR • variable_declaration RPAR

    $default  reduce using rule 4 (variable_declaration)

    variable_declaration  go to state 8


State 8

    3 class: PUBLIC CLASS CLASS_NAME LPAR variable_declaration • RPAR
    5 variable_declaration: variable_declaration • DATATYPE IDENT
    6                     | variable_declaration • PRIVATE DATATYPE IDENT
    7                     | variable_declaration • PUBLIC DATATYPE IDENT

    DATATYPE  shift, and go to state 9
    PRIVATE   shift, and go to state 10
    PUBLIC    shift, and go to state 11
    RPAR      shift, and go to state 12


State 9

    5 variable_declaration: variable_declaration DATATYPE • IDENT

    IDENT  shift, and go to state 13


State 10

    6 variable_declaration: variable_declaration PRIVATE • DATATYPE IDENT

    DATATYPE  shift, and go to state 14


State 11

    7 variable_declaration: variable_declaration PUBLIC • DATATYPE IDENT

    DATATYPE  shift, and go to state 15


State 12

    3 class: PUBLIC CLASS CLASS_NAME LPAR variable_declaration RPAR •

    $default  reduce using rule 3 (class)


State 13

    5 variable_declaration: variable_declaration DATATYPE IDENT •

    $default  reduce using rule 5 (variable_declaration)


State 14

    6 variable_declaration: variable_declaration PRIVATE DATATYPE • IDENT

    IDENT  shift, and go to state 16


State 15

    7 variable_declaration: variable_declaration PUBLIC DATATYPE • IDENT

    IDENT  shift, and go to state 17


State 16

    6 variable_declaration: variable_declaration PRIVATE DATATYPE IDENT •

    $default  reduce using rule 6 (variable_declaration)


State 17

    7 variable_declaration: variable_declaration PUBLIC DATATYPE IDENT •

    $default  reduce using rule 7 (variable_declaration)
